{"mtime":1378689759,"js":"(function() {\n  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  $(function() {\n    var $signupForm, apiKey, mcApiBase, offsets, toggleVisibleWatches, watches;\n    $(document).foundation();\n    if (Modernizr.is_mobile) {\n      defer(function() {\n        return window.scrollTo(0, 1);\n      });\n    }\n    mcApiBase = 'https://us2.api.mailchimp.com/2.0/';\n    apiKey = '3bedf01373aae0427b97f62634f70afb-us2';\n    $signupForm = $('#signup-form');\n    $signupForm.find('input').focus(function(e) {\n      $signupForm.addClass('focusing');\n      return $signupForm.find('button').html('Sign me up!');\n    });\n    $signupForm.find('input').blur(function(e) {\n      return $signupForm.removeClass('focusing');\n    });\n    $signupForm.submit(function(e) {\n      e.preventDefault();\n      return $.getJSON(this.action + \"?callback=?\", $(this).serialize(), function(data) {\n        if (data.Status === 400) {\n          return alert(\"Error: \" + data.Message);\n        } else {\n          return $signupForm.parent().addClass('submitted');\n        }\n      });\n    });\n    watches = {};\n    watches.weekender = $('#weekender .svg-main').clocker();\n    watches.no1 = $('#no1 .svg-main').clocker();\n    watches.bn0032 = $('#bn0032 .svg-main').clocker();\n    watches.normal = $('#normal .svg-main').clocker({\n      hourIndicator: '.hour-indicator, .hour-shadow',\n      secondIndicator: '.second-indicator, .second-shadow',\n      minuteIndicator: '.minute-indicator, .minute-shadow'\n    });\n    offsets = {\n      local: false,\n      london: 1,\n      paris: 2,\n      sanfrancisco: -7\n    };\n    toggleVisibleWatches = function() {\n      return $.each(watches, function(i, watch) {\n        if (watch.$.visible(true)) {\n          return watch.play();\n        } else {\n          return watch.pause();\n        }\n      });\n    };\n    toggleVisibleWatches();\n    $(document).on('scroll', toggleVisibleWatches);\n    $('.timezones li a').click(function(e) {\n      var $el, city;\n      e.preventDefault();\n      $el = $(e.target);\n      $el.parents('.timezones').find('li').removeClass('current');\n      $el.parent().addClass('current');\n      city = $el.attr('href').split('#')[1];\n      return $.each(watches, function(i, watch) {\n        return watch.setOffset(offsets[city]);\n      });\n    });\n    return $('.al').click(function(e) {\n      var anchor;\n      e.preventDefault;\n      anchor = $(e.target).attr('href');\n      $.scrollTo($(anchor).offset().top, 1000);\n      return false;\n    });\n  });\n\n  (function($) {\n    var Clocker, defer;\n    Clocker = (function() {\n      var updateTimer;\n\n      function Clocker(elements, options) {\n        this.elements = elements;\n        this.options = options;\n        this.updateTime = __bind(this.updateTime, this);\n\n        this.pause = __bind(this.pause, this);\n\n        this.play = __bind(this.play, this);\n\n        this.setOffset = __bind(this.setOffset, this);\n\n        this.init();\n        this.$ = this.elements;\n      }\n\n      Clocker.prototype.hourLoop = false;\n\n      Clocker.prototype.minuteLoop = false;\n\n      Clocker.prototype.secondLoop = false;\n\n      Clocker.prototype.localOffset = (new Date()).getTimezoneOffset() / -60;\n\n      Clocker.prototype.offsetTimezone = false;\n\n      Clocker.prototype.isAnimatingHands = false;\n\n      updateTimer = null;\n\n      Clocker.prototype.init = function() {\n        var settings,\n          _this = this;\n        settings = {\n          dayIndicator: '.day-indicator',\n          hourIndicator: '.hour-indicator',\n          minuteIndicator: '.minute-indicator',\n          secondIndicator: '.second-indicator'\n        };\n        settings = $.extend(settings, this.options);\n        return this.elements.each(function(i, el) {\n          var $el;\n          _this.$ = $el = $(el);\n          _this.$dayIndicator = $el.find(settings.dayIndicator);\n          _this.$hourIndicator = $el.find(settings.hourIndicator);\n          _this.$minuteIndicator = $el.find(settings.minuteIndicator);\n          _this.$secondIndicator = $el.find(settings.secondIndicator);\n          return _this.play(false);\n        });\n      };\n\n      Clocker.prototype.setOffset = function(offset) {\n        if (this.offsetTimezone !== offset && (offset || this.offsetTimezone !== this.localOffset)) {\n          this.offsetTimezone = offset;\n          return this.play();\n        }\n      };\n\n      Clocker.prototype.play = function(longTransition) {\n        var events,\n          _this = this;\n        if (longTransition == null) {\n          longTransition = true;\n        }\n        this.pause();\n        this.isAnimatingHands = false;\n        if (longTransition) {\n          this.$hourIndicator.add(this.$minuteIndicator).add(this.$dayIndicator).addClass('long-transition');\n        }\n        defer(function() {\n          _this.updateTime();\n          return _this.isAnimatingHands = true;\n        });\n        events = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend';\n        this.$minuteIndicator.unbind(events);\n        return this.$minuteIndicator.bind(events, function() {\n          _this.isAnimatingHands = false;\n          _this.$hourIndicator.add(_this.$minuteIndicator).removeClass('long-transition');\n          return _this.$minuteIndicator.unbind(events);\n        });\n      };\n\n      Clocker.prototype.pause = function() {\n        return clearTimeout(this.updateTimer);\n      };\n\n      Clocker.prototype.updateTime = function() {\n        var time,\n          _this = this;\n        time = this.getTime();\n        $.each(time, function(key, val) {\n          var $indicator, degree;\n          $indicator = _this[\"$\" + key + \"Indicator\"];\n          degree = val.exactDeg || val.deg;\n          if ($indicator && (!_this.isAnimatingHands || key === 'second')) {\n            if (degree > 20 && degree < 30) {\n              _this[\"\" + key + \"Loop\"] = false;\n            }\n            if (degree > 0 && degree < 20 && !_this[\"\" + key + \"Loop\"]) {\n              _this[\"\" + key + \"Loop\"] = degree;\n              $indicator.addClass('no-transition');\n              return defer(function() {\n                _this.updateIndicator($indicator, 0);\n                return defer(function() {\n                  $indicator.removeClass('no-transition');\n                  return defer(function() {\n                    return _this.updateIndicator($indicator, degree);\n                  });\n                });\n              });\n            } else {\n              return _this.updateIndicator($indicator, degree);\n            }\n          }\n        });\n        return this.updateTimer = setTimeout((function() {\n          return _this.updateTime();\n        }), 200);\n      };\n\n      Clocker.prototype.updateIndicator = function($indicator, deg) {\n        return $indicator.css(this.prefixVendor('transform', \"rotate(\" + deg + \"deg)\"));\n      };\n\n      Clocker.prototype.getTime = function() {\n        var d, exactH, exactM, exactS, h, m, mil, now, s, time, utc;\n        now = new Date();\n        if (this.offsetTimezone !== false) {\n          utc = now.getTime() + now.getTimezoneOffset() * 60000;\n          now = new Date(utc + 3600000 * this.offsetTimezone);\n        }\n        d = now.getDate();\n        h = now.getHours();\n        m = now.getMinutes();\n        s = now.getSeconds();\n        mil = now.getMilliseconds();\n        exactS = s + mil / 1000;\n        exactM = m + exactS / 60;\n        exactH = h + exactM / 60;\n        exactM = exactM + h * 60;\n        return time = {\n          day: {\n            val: d,\n            deg: this.valToDeg(d - 1, 31)\n          },\n          hour: {\n            val: h,\n            deg: this.valToDeg(h, 12),\n            exactDeg: this.valToDeg(exactH, 12)\n          },\n          minute: {\n            val: m,\n            deg: this.valToDeg(m, 60),\n            exactDeg: this.valToDeg(exactM, 60)\n          },\n          second: {\n            val: s,\n            deg: this.valToDeg(s, 60)\n          }\n        };\n      };\n\n      Clocker.prototype.valToDeg = function(val, total) {\n        return (360 * val / total) || 360;\n      };\n\n      Clocker.prototype.prefixVendor = function(property, val) {\n        var prefix, properties, _fn, _i, _len, _ref;\n        properties = {\n          property: val\n        };\n        _ref = this.cssVendorPrefixes;\n        _fn = function(prefix) {\n          return properties[\"\" + prefix + \"-\" + property] = val;\n        };\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          prefix = _ref[_i];\n          _fn(prefix);\n        }\n        return properties;\n      };\n\n      Clocker.prototype.cssVendorPrefixes = ['-webkit', '-moz', '-ms', '-o'];\n\n      return Clocker;\n\n    })();\n    defer = function(callback) {\n      return setTimeout(callback, 1);\n    };\n    return jQuery.fn.clocker = function(options) {\n      var clocker;\n      clocker = new Clocker(this, options);\n      return clocker;\n    };\n  })(jQuery);\n\n}).call(this);\n"}